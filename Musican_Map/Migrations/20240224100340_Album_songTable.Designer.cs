// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Musican_Map.Context;

#nullable disable

namespace Musican_Map.Migrations
{
    [DbContext(typeof(MusicandbContext))]
    [Migration("20240224100340_Album_songTable")]
    partial class Album_songTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Musican_Map.Entites.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("musicanId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("musicanId");

                    b.ToTable("albums");
                });

            modelBuilder.Entity("Musican_Map.Entites.Album_Song", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("SongTitle")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlbumId", "SongTitle");

                    b.HasIndex("SongTitle");

                    b.ToTable("album_Songs");
                });

            modelBuilder.Entity("Musican_Map.Entites.Instrument", b =>
                {
                    b.Property<int>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Name"), 1L, 1);

                    b.Property<int>("key")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("instruments");
                });

            modelBuilder.Entity("Musican_Map.Entites.Musican", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("musicans");
                });

            modelBuilder.Entity("Musican_Map.Entites.Song", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Title");

                    b.ToTable("songs");
                });

            modelBuilder.Entity("Musican_Map.Entites.Album", b =>
                {
                    b.HasOne("Musican_Map.Entites.Musican", "musican")
                        .WithMany()
                        .HasForeignKey("musicanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("musican");
                });

            modelBuilder.Entity("Musican_Map.Entites.Album_Song", b =>
                {
                    b.HasOne("Musican_Map.Entites.Album", null)
                        .WithMany("album_Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musican_Map.Entites.Song", null)
                        .WithMany("album_Songs")
                        .HasForeignKey("SongTitle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musican_Map.Entites.Album", b =>
                {
                    b.Navigation("album_Songs");
                });

            modelBuilder.Entity("Musican_Map.Entites.Song", b =>
                {
                    b.Navigation("album_Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
